/**
 */
package org.example.dm.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.example.dm.util.DmAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DmItemProviderAdapterFactory extends DmAdapterFactory
        implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DmItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.Localization} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LocalizationItemProvider localizationItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.Localization}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLocalizationAdapter() {
        if (localizationItemProvider == null) {
            localizationItemProvider = new LocalizationItemProvider(this);
        }

        return localizationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.DataModel} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataModelItemProvider dataModelItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.DataModel}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataModelAdapter() {
        if (dataModelItemProvider == null) {
            dataModelItemProvider = new DataModelItemProvider(this);
        }

        return dataModelItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.Entity} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EntityItemProvider entityItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.Entity}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEntityAdapter() {
        if (entityItemProvider == null) {
            entityItemProvider = new EntityItemProvider(this);
        }

        return entityItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.Attribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributeItemProvider attributeItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.Attribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeAdapter() {
        if (attributeItemProvider == null) {
            attributeItemProvider = new AttributeItemProvider(this);
        }

        return attributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.Relationship} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RelationshipItemProvider relationshipItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.Relationship}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRelationshipAdapter() {
        if (relationshipItemProvider == null) {
            relationshipItemProvider = new RelationshipItemProvider(this);
        }

        return relationshipItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.RelationshipEnd} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RelationshipEndItemProvider relationshipEndItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.RelationshipEnd}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRelationshipEndAdapter() {
        if (relationshipEndItemProvider == null) {
            relationshipEndItemProvider = new RelationshipEndItemProvider(this);
        }

        return relationshipEndItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.BooleanType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BooleanTypeItemProvider booleanTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.BooleanType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBooleanTypeAdapter() {
        if (booleanTypeItemProvider == null) {
            booleanTypeItemProvider = new BooleanTypeItemProvider(this);
        }

        return booleanTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.StringType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StringTypeItemProvider stringTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.StringType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStringTypeAdapter() {
        if (stringTypeItemProvider == null) {
            stringTypeItemProvider = new StringTypeItemProvider(this);
        }

        return stringTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.NumericType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NumericTypeItemProvider numericTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.NumericType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNumericTypeAdapter() {
        if (numericTypeItemProvider == null) {
            numericTypeItemProvider = new NumericTypeItemProvider(this);
        }

        return numericTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.DateType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DateTypeItemProvider dateTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.DateType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDateTypeAdapter() {
        if (dateTypeItemProvider == null) {
            dateTypeItemProvider = new DateTypeItemProvider(this);
        }

        return dateTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.DateTimeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DateTimeTypeItemProvider dateTimeTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.DateTimeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDateTimeTypeAdapter() {
        if (dateTimeTypeItemProvider == null) {
            dateTimeTypeItemProvider = new DateTimeTypeItemProvider(this);
        }

        return dateTimeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.example.dm.UuidType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UuidTypeItemProvider uuidTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.example.dm.UuidType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUuidTypeAdapter() {
        if (uuidTypeItemProvider == null) {
            uuidTypeItemProvider = new UuidTypeItemProvider(this);
        }

        return uuidTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void dispose() {
        if (localizationItemProvider != null)
            localizationItemProvider.dispose();
        if (dataModelItemProvider != null)
            dataModelItemProvider.dispose();
        if (entityItemProvider != null)
            entityItemProvider.dispose();
        if (attributeItemProvider != null)
            attributeItemProvider.dispose();
        if (relationshipItemProvider != null)
            relationshipItemProvider.dispose();
        if (relationshipEndItemProvider != null)
            relationshipEndItemProvider.dispose();
        if (booleanTypeItemProvider != null)
            booleanTypeItemProvider.dispose();
        if (stringTypeItemProvider != null)
            stringTypeItemProvider.dispose();
        if (numericTypeItemProvider != null)
            numericTypeItemProvider.dispose();
        if (dateTypeItemProvider != null)
            dateTypeItemProvider.dispose();
        if (dateTimeTypeItemProvider != null)
            dateTimeTypeItemProvider.dispose();
        if (uuidTypeItemProvider != null)
            uuidTypeItemProvider.dispose();
    }

}
