/*
 * generated by Xtext 2.35.0
 */
package org.example.dm.xtext.formatting2

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.example.dm.Attribute
import org.example.dm.BooleanType
import org.example.dm.DataModel
import org.example.dm.DateTimeType
import org.example.dm.DateType
import org.example.dm.DmPackage
import org.example.dm.Entity
import org.example.dm.Localization
import org.example.dm.NamedElement
import org.example.dm.NumericType
import org.example.dm.Relationship
import org.example.dm.RelationshipEnd
import org.example.dm.StringType
import org.example.dm.UuidType

class TextualDataModelFormatter extends AbstractFormatter2 {

    def dispatch void format(DataModel dataModel, extension IFormattableDocument document) {
        formatNamedElement(dataModel, document)
        dataModel.regionFor.keyword('@locales').append[noSpace]
        dataModel.regionFor.feature(DmPackage.eINSTANCE.namedElement_Name).surround[oneSpace]
        for (entity : dataModel.entities) {
            entity.prepend[newLines = 2].format
        }
        for (relationship : dataModel.relationships) {
            relationship.prepend[newLines = 2].format
        }
        for (dataType : dataModel.dataTypes) {
            dataType.prepend[newLines = 2].format
        }
    }

    def dispatch void format(Entity entity, extension IFormattableDocument document) {
        formatNamedElement(entity, document)
        entity.regionFor.feature(DmPackage.eINSTANCE.namedElement_Name).surround[oneSpace]
        entity.regionFor.feature(DmPackage.eINSTANCE.entity_Kind).surround[noSpace]
        for (attribute : entity.attributes) {
            attribute.prepend[newLines = 2].format
        }
    }

    def dispatch void format(Attribute attribute, extension IFormattableDocument document) {
        formatNamedElement(attribute, document)
        attribute.regionFor.keyword('..').surround[noSpace]
    }

    def dispatch void format(Relationship relationship, extension IFormattableDocument document) {
        formatNamedElement(relationship, document)
        relationship.regionFor.feature(DmPackage.eINSTANCE.namedElement_Name).surround[oneSpace]
        relationship.regionFor.feature(DmPackage.eINSTANCE.relationship_Kind).surround[noSpace]
        for (end : relationship.ends) {
            end.prepend[newLines = 2].format
        }
    }

    def dispatch void format(RelationshipEnd end, extension IFormattableDocument document) {
        formatNamedElement(end, document)
        end.regionFor.keyword('..').surround[noSpace]
    }

    def dispatch void format(BooleanType dataType, extension IFormattableDocument document) {
        formatNamedElement(dataType, document)
    }

    def dispatch void format(StringType dataType, extension IFormattableDocument document) {
        formatNamedElement(dataType, document)
        dataType.regionFor.keyword('length').prepend[newLine]
        dataType.regionFor.keyword('minLength').prepend[newLine]
        dataType.regionFor.keyword('maxLength').prepend[newLine]
        dataType.regionFor.keyword('pattern').prepend[newLine]
    }

    def dispatch void format(NumericType dataType, extension IFormattableDocument document) {
        formatNamedElement(dataType, document)
        dataType.regionFor.keyword('size').prepend[newLine]
        dataType.regionFor.keyword('fractionDigits').prepend[newLine]
        dataType.regionFor.keyword('totalDigits').prepend[newLine]
        dataType.regionFor.keyword('minInclusive').prepend[newLine]
        dataType.regionFor.keyword('minExclusive').prepend[newLine]
        dataType.regionFor.keyword('maxInclusive').prepend[newLine]
        dataType.regionFor.keyword('maxExclusive').prepend[newLine]
        dataType.regionFor.keyword('measurementUnit').prepend[newLine]
    }

    def dispatch void format(DateType dataType, extension IFormattableDocument document) {
        formatNamedElement(dataType, document)
    }

    def dispatch void format(DateTimeType dataType, extension IFormattableDocument document) {
        formatNamedElement(dataType, document)
    }

    def dispatch void format(UuidType dataType, extension IFormattableDocument document) {
        formatNamedElement(dataType, document)
    }

    def dispatch void format(Localization localization, extension IFormattableDocument document) {
        localization.regionFor.feature(DmPackage.eINSTANCE.localization_Locale).prepend[space = ' ']
        localization.regionFor.keyword('(').surround[noSpace]
        localization.regionFor.keyword(')').prepend[noSpace]
    }

    def formatNamedElement(NamedElement element, extension IFormattableDocument document) {
        element.regionFor.keyword('@description').prepend[newLine].append[noSpace]
        for (localization : element.localizations) {
            localization.prepend[newLine].format
        }
        interior(
            element.regionFor.keyword('{').prepend[space = ' '].append[newLine],
            element.regionFor.keyword('}').prepend[newLine],
            [indent]
        )
    }

}
